<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on Meow</title><link>https://ziqi-yang.github.io/blog_meow/tags/rust/</link><description>Recent content in rust on Meow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Jun 2023 11:14:17 +0800</lastBuildDate><atom:link href="https://ziqi-yang.github.io/blog_meow/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust Pass Input to Command Stdin</title><link>https://ziqi-yang.github.io/blog_meow/programme/rust-pass-input-to-command-stdin/</link><pubDate>Mon, 26 Jun 2023 11:14:17 +0800</pubDate><guid>https://ziqi-yang.github.io/blog_meow/programme/rust-pass-input-to-command-stdin/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 use std::{process::{Command, Stdio}, io::Write}; fn copy_to_clipboard_wcopy(s: String) { let mut wcopy = Command::new(&amp;#34;wc&amp;#34;) .arg(&amp;#34;-c&amp;#34;) .stdin(Stdio::piped()) .stdout(Stdio::piped()) .spawn() .expect(&amp;#34;Failed to spawn `xclip`: please ensure you have it installed.&amp;#34;); let mut stdin = wcopy.stdin.take().expect(&amp;#34;Failed to write to stdin&amp;#34;); std::thread::spawn(move || { stdin.write_all(s.as_bytes()).expect(&amp;#34;Failed to write to stdin&amp;#34;); }); let output = wcopy.</description></item><item><title>Rust Import Module</title><link>https://ziqi-yang.github.io/blog_meow/programme/rust-import-module/</link><pubDate>Tue, 07 Mar 2023 18:40:09 +0800</pubDate><guid>https://ziqi-yang.github.io/blog_meow/programme/rust-import-module/</guid><description> Suppose we have two files src/main.rs and src/utils.rs, to use utils.rs in main.rs, there are two ways that work.
Use mod keyword in main.rs 1 2 3 // main.rs mod crate::utils; // mod utils; // use relative path to import Use pub mod keyword in lib.rs create a lib.rs file in src directory.
1 2 // lib.rs pub mod utils; then add this in main.rs
1 use &amp;lt;packageName&amp;gt;::utils;</description></item><item><title>Rust_libraries</title><link>https://ziqi-yang.github.io/blog_meow/programme/rust_libraries/</link><pubDate>Wed, 01 Mar 2023 10:13:58 +0800</pubDate><guid>https://ziqi-yang.github.io/blog_meow/programme/rust_libraries/</guid><description>Resources awesome-rust 日常开发第三方库精选 Rust Language Related Error crate description anyhow Flexible concrete Error type built on std::error::Error thiserror derive(Error) futures futures and streams featuring zero allocations, composability, and iterator-like interfaces Logging crate description log Offical, to show message, it needs a implementation, recommend env_logger tracing trace, better for async programming development Concurrency crate description tokio suitable for IO-intensive computing, not the</description></item><item><title>rCore</title><link>https://ziqi-yang.github.io/blog_meow/programme/rcore/</link><pubDate>Mon, 20 Feb 2023 22:35:19 +0800</pubDate><guid>https://ziqi-yang.github.io/blog_meow/programme/rcore/</guid><description>Based on rCore-Tutorial-Guide 2023 春季学期 and rCore-Tutorial-Book 第三版 Useful Command To show platforms based on RISC-V that rustc supports 1 rustc --print target-list | grep riscv Rust Note Cross Build (RISC-V) .cargo/.config [build] target = &amp;#34;riscv64gc-unknown-none-elf&amp;#34; No Std Besides remove std section, you can refer to smallest no std - The Embedonomicon. Notes Linker Script linker script specifications: info ld Scripts or you can read</description></item></channel></rss>